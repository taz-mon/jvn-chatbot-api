name: Deploy JVN Chatbot
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      MONGODB_CLUSTER: ${{ secrets.MONGODB_CLUSTER }}
      MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      NODE_ENV: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
    
    - name: Debug secrets configuration
      run: |
        node -e "
        console.log('Environment check:');
        console.log('MONGODB_USERNAME exists:', !!process.env.MONGODB_USERNAME);
        console.log('MONGODB_PASSWORD exists:', !!process.env.MONGODB_PASSWORD);
        console.log('MONGODB_CLUSTER exists:', !!process.env.MONGODB_CLUSTER);
        console.log('MONGODB_DATABASE:', process.env.MONGODB_DATABASE);
        console.log('NODE_ENV:', process.env.NODE_ENV);
        "
    
    - name: Test SecretsManager
      run: |
        node -e "
        const SecretsManager = require('./config/secrets');
        async function test() {
          const sm = new SecretsManager();
          try {
            const uri = await sm.getMongoDBURI();
            console.log('SecretsManager: URI constructed successfully');
            console.log('URI length:', uri.length);
            console.log('URI format valid:', uri.startsWith('mongodb+srv://'));
          } catch (error) {
            console.error('SecretsManager error:', error.message);
            process.exit(1);
          }
        }
        test();
        "
        
    - name: Test MongoDB connectivity
      run: |
        node -e "
        const mongoose = require('mongoose');
        const SecretsManager = require('./config/secrets');
        
        async function testConnection() {
          try {
            const sm = new SecretsManager();
            const uri = await sm.getMongoDBURI();
            
            console.log('Testing MongoDB connection...');
            const conn = await mongoose.connect(uri, { 
              serverSelectionTimeoutMS: 10000,
              socketTimeoutMS: 10000,
              connectTimeoutMS: 10000
            });
            console.log('MongoDB connection successful!');
            console.log('Connected to:', conn.connection.host);
            await mongoose.disconnect();
            console.log('Connection test completed successfully');
          } catch (error) {
            console.error('MongoDB connection failed:');
            console.error('Error:', error.message);
            console.error('Code:', error.code);
            console.error('Name:', error.name);
            process.exit(1);
          }
        }
        
        testConnection();
        "
      
    - name: Run tests
      run: npm test